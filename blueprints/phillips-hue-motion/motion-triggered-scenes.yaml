blueprint:
  name: Motion-Activated Light with Timer
  description: >
    Turn on a light when motion is detected and turn it off after a delay, with an option to repeat the off command for reliability.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: The motion sensor entity to monitor.
      selector:
        entity:
          domain: binary_sensor
    timer:
      name: Timer
      description: The timer entity to control light off delay.
      selector:
        entity:
          domain: timer
    light:
      name: Light
      description: The light entity to control.
      selector:
        entity:
          domain: light
    scene:
      name: Scene
      description: The scene to activate when motion is detected.
      selector:
        entity:
          domain: scene
    ignore_if_on:
      name: Do not disturb
      description: >
        Sensors/cameras won't change lights that are already on.
      default: false
      selector:
        boolean: {}

variables:
  ignore: !input ignore_if_on
  light_entity: !input light
  turned_on_before: >
    {{ 
      (as_timestamp(now()) - as_timestamp(states[light_entity].last_changed)) <
      (as_timestamp(now()) - as_timestamp(trigger.from_state.last_changed))
    }}

trigger:
  - platform: state
    entity_id: !input motion_sensor

condition: []

action:
  - alias: If motion detected
    if:
      - condition: state
        entity_id: !input motion_sensor
        state: "on"
      - condition: template
        value_template: >
          {{ 
            not ignore or 
            (ignore and is_state(light_entity, 'off')) 
          }}
    then:
      - service: scene.turn_on
        target:
          entity_id: !input scene
      - service: timer.cancel
        target:
          entity_id: !input timer

  - alias: If motion cleared
    if:
      - condition: state
        entity_id: !input motion_sensor
        state: "off"
      - condition: template
        value_template: >
          {{ 
            not ignore or 
            (ignore and turned_on_before) 
          }}
    then:
      - service: timer.start
        target:
          entity_id: !input timer
      - wait_for_trigger:
          - platform: state
            entity_id: !input timer
            from: active
            to: idle
        continue_on_timeout: false
      - service: light.turn_off
        target:
          entity_id: !input light
        data:
          transition: 5
      - repeat:
          count: 5
          sequence:
            - delay:
                seconds: 1
            - service: light.turn_off
              target:
                entity_id: !input light

mode: restart
