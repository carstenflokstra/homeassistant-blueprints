blueprint:
  name: Motion Triggered Automation
  description: >
    Automation to trigger a scene or light when motion is detected, with options for delay, ignoring the sensor if lights are on, and custom dimming before turning off.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: The motion sensor to trigger the automation.
      selector:
        entity:
          domain: binary_sensor
    target_entity:
      name: Target Entity
      description: The entity to control (can be a light or scene).
      selector:
        entity: {}
    delay_duration:
      name: Delay Duration
      description: Time to wait after motion stops before dimming or turning off.
      default: 120
      selector:
        number:
          min: 1
          max: 3600
          unit_of_measurement: seconds
          mode: slider
    dimming_percentage:
      name: Dimming Percentage
      description: The percentage brightness to set before turning off (if applicable).
      default: 30
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider
    ignore_if_lights_on:
      name: Ignore if Lights Are On
      description: Do not trigger the automation if the lights are already on.
      default: false
      selector:
        boolean: {}

mode: single
max_exceeded: silent
trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"
  - platform: state
    entity_id: !input motion_sensor
    to: "off"

condition: []

action:
  - choose:
      # When motion is detected
      - conditions:
          - condition: state
            entity_id: !input motion_sensor
            state: "on"
          - condition: template
            value_template: >
              {{ not (is_state(input.target_entity, 'on') and is_state(input.ignore_if_lights_on, 'true')) }}
        sequence:
          # Turn on the scene or light
          - service: scene.turn_on
            target:
              entity_id: !input target_entity
      # When motion stops
      - conditions:
          - condition: state
            entity_id: !input motion_sensor
            state: "off"
        sequence:
          # Wait for motion to resume or for delay to expire
          - wait_for_trigger:
              - platform: state
                entity_id: !input motion_sensor
                to: "on"
            timeout: "{{ input.delay_duration }}"
            continue_on_timeout: true
          # Dim the lights if motion has not resumed
          - condition: state
            entity_id: !input motion_sensor
            state: "off"
          - service: light.turn_on
            target:
              entity_id: !input target_entity
            data_template:
              brightness_pct: "{{ input.dimming_percentage }}"
          # Wait for 10 seconds before turning off the lights
          - delay: "00:00:10"
          # Turn off the lights completely
          - service: light.turn_off
            target:
              entity_id: !input target_entity